{"version":3,"file":"medusa-react.cjs.production.min.js","sources":["../src/contexts/medusa.tsx","../src/contexts/session-cart.tsx","../src/hooks/utils/queryKeysFactory.ts","../src/helpers/index.ts","../src/hooks/store/products/queries.ts","../src/hooks/store/carts/queries.ts","../node_modules/regenerator-runtime/runtime.js","../src/hooks/store/carts/mutations.ts","../src/hooks/store/shipping-options/queries.ts","../src/hooks/store/regions/queries.ts","../src/hooks/store/return-reasons/queries.ts","../src/hooks/store/swaps/queries.ts","../src/hooks/store/orders/queries.ts","../src/hooks/store/customers/queries.ts","../src/hooks/store/gift-cards/queries.ts","../src/hooks/store/collections/queries.ts","../src/contexts/cart.tsx","../src/hooks/admin/auth/queries.ts","../src/hooks/utils/buildOptions.ts","../src/hooks/admin/batch-jobs/queries.ts","../src/hooks/admin/orders/queries.ts","../src/hooks/admin/collections/queries.ts","../src/hooks/admin/customer-groups/queries.ts","../src/hooks/admin/customers/queries.ts","../src/hooks/admin/discounts/queries.ts","../src/hooks/admin/draft-orders/queries.ts","../src/hooks/admin/gift-cards/queries.ts","../src/hooks/admin/invites/queries.ts","../src/hooks/admin/notes/queries.ts","../src/hooks/admin/notifications/queries.ts","../src/hooks/admin/price-lists/queries.ts","../src/hooks/admin/products/queries.ts","../src/hooks/admin/variants/queries.ts","../src/hooks/admin/product-tags/queries.ts","../src/hooks/admin/product-types/queries.ts","../src/hooks/admin/regions/queries.ts","../src/hooks/admin/return-reasons/queries.ts","../src/hooks/admin/returns/queries.ts","../src/hooks/admin/shipping-options/queries.ts","../src/hooks/admin/shipping-profiles/queries.ts","../src/hooks/admin/store/queries.ts","../src/hooks/admin/swaps/queries.ts","../src/hooks/admin/tax-rates/queries.ts","../src/hooks/admin/users/queries.ts","../src/hooks/utils/useLocalStorage.ts","../src/hooks/admin/invites/mutations.ts","../src/hooks/admin/customer-groups/mutations.ts","../src/hooks/admin/orders/mutations.ts","../src/hooks/admin/store/mutations.ts","../src/hooks/admin/batch-jobs/mutations.ts","../src/hooks/admin/claims/mutations.ts","../src/hooks/admin/returns/mutations.ts","../src/hooks/admin/swaps/mutations.ts","../src/hooks/admin/collections/mutations.ts","../src/hooks/admin/customers/mutations.ts","../src/hooks/admin/discounts/mutations.ts","../src/hooks/admin/draft-orders/mutations.ts","../src/hooks/admin/gift-cards/mutations.ts","../src/hooks/admin/notes/mutations.ts","../src/hooks/admin/uploads/mutations.ts","../src/hooks/admin/price-lists/mutations.ts","../src/hooks/admin/products/mutations.ts","../src/hooks/admin/tax-rates/mutations.ts","../src/hooks/admin/regions/mutations.ts","../src/hooks/admin/return-reasons/mutations.ts","../src/hooks/admin/shipping-options/mutations.ts","../src/hooks/admin/shipping-profiles/mutations.ts","../src/hooks/admin/users/mutations.ts","../src/hooks/admin/auth/mutations.ts","../src/hooks/admin/notifications/mutations.ts","../src/hooks/store/customers/mutations.ts","../src/hooks/store/line-items/mutations.ts","../src/hooks/store/returns/mutations.ts","../src/hooks/store/swaps/mutations.ts"],"sourcesContent":["import React from \"react\"\nimport { QueryClientProvider, QueryClientProviderProps } from \"react-query\"\nimport Medusa from \"@medusajs/medusa-js\"\n\ninterface MedusaContextState {\n  client: Medusa\n}\n\nconst MedusaContext = React.createContext<MedusaContextState | null>(null)\n\nexport const useMedusa = () => {\n  const context = React.useContext(MedusaContext)\n  if (!context) {\n    throw new Error(\"useMedusa must be used within a MedusaProvider\")\n  }\n  return context\n}\n\ninterface MedusaProviderProps {\n  baseUrl: string\n  queryClientProviderProps: QueryClientProviderProps\n  children: React.ReactNode\n  apiKey?: string\n}\n\nexport const MedusaProvider = ({\n  queryClientProviderProps,\n  baseUrl,\n  apiKey,\n  children,\n}: MedusaProviderProps) => {\n  const medusaClient = new Medusa({ baseUrl, maxRetries: 0, apiKey })\n  return (\n    <QueryClientProvider {...queryClientProviderProps}>\n      <MedusaContext.Provider\n        value={{\n          client: medusaClient,\n        }}\n      >\n        {children}\n      </MedusaContext.Provider>\n    </QueryClientProvider>\n  )\n}\n","import React, { useContext, useEffect } from \"react\"\nimport { useLocalStorage } from \"../hooks/utils\"\nimport { RegionInfo, ProductVariant } from \"../types\"\nimport { getVariantPrice } from \"../helpers\"\nimport { isArray, isEmpty, isObject } from \"lodash\"\n\ninterface Item {\n  variant: ProductVariant\n  quantity: number\n  readonly total?: number\n}\n\nexport interface SessionCartState {\n  region: RegionInfo\n  items: Item[]\n  totalItems: number\n  total: number\n}\n\ninterface SessionCartContextState extends SessionCartState {\n  setRegion: (region: RegionInfo) => void\n  addItem: (item: Item) => void\n  removeItem: (id: string) => void\n  updateItem: (id: string, item: Partial<Item>) => void\n  setItems: (items: Item[]) => void\n  updateItemQuantity: (id: string, quantity: number) => void\n  incrementItemQuantity: (id: string) => void\n  decrementItemQuantity: (id: string) => void\n  getItem: (id: string) => Item | undefined\n  clearItems: () => void\n}\n\nconst SessionCartContext = React.createContext<SessionCartContextState | null>(\n  null\n)\n\nenum ACTION_TYPES {\n  INIT,\n  ADD_ITEM,\n  SET_ITEMS,\n  REMOVE_ITEM,\n  UPDATE_ITEM,\n  CLEAR_ITEMS,\n  SET_REGION,\n}\n\ntype Action =\n  | { type: ACTION_TYPES.SET_REGION; payload: RegionInfo }\n  | { type: ACTION_TYPES.INIT; payload: object }\n  | { type: ACTION_TYPES.ADD_ITEM; payload: Item }\n  | {\n      type: ACTION_TYPES.UPDATE_ITEM\n      payload: { id: string; item: Partial<Item> }\n    }\n  | { type: ACTION_TYPES.REMOVE_ITEM; payload: { id: string } }\n  | { type: ACTION_TYPES.SET_ITEMS; payload: Item[] }\n  | { type: ACTION_TYPES.CLEAR_ITEMS }\n\nconst reducer = (state: SessionCartState, action: Action) => {\n  switch (action.type) {\n    case ACTION_TYPES.INIT: {\n      return state\n    }\n    case ACTION_TYPES.SET_REGION: {\n      return generateCartState(\n        {\n          ...state,\n          region: action.payload,\n        },\n        state.items\n      )\n    }\n    case ACTION_TYPES.ADD_ITEM: {\n      const duplicateVariantIndex = state.items.findIndex(\n        item => item.variant.id === action.payload?.variant?.id\n      )\n      if (duplicateVariantIndex !== -1) {\n        state.items.splice(duplicateVariantIndex, 1)\n      }\n      const items = [...state.items, action.payload]\n      return generateCartState(state, items)\n    }\n    case ACTION_TYPES.UPDATE_ITEM: {\n      const items = state.items.map(item =>\n        item.variant.id === action.payload.id\n          ? { ...item, ...action.payload.item }\n          : item\n      )\n\n      return generateCartState(state, items)\n    }\n    case ACTION_TYPES.REMOVE_ITEM: {\n      const items = state.items.filter(\n        item => item.variant.id !== action.payload.id\n      )\n      return generateCartState(state, items)\n    }\n    case ACTION_TYPES.SET_ITEMS: {\n      return generateCartState(state, action.payload)\n    }\n    case ACTION_TYPES.CLEAR_ITEMS: {\n      return {\n        ...state,\n        items: [],\n        total: 0,\n        totalItems: 0,\n      }\n    }\n    default:\n      return state\n  }\n}\n\nexport const generateCartState = (state: SessionCartState, items: Item[]) => {\n  const newItems = generateItems(state.region, items)\n  return {\n    ...state,\n    items: newItems,\n    totalItems: items.reduce((sum, item) => sum + item.quantity, 0),\n    total: calculateSessionCartTotal(newItems),\n  }\n}\n\nconst generateItems = (region: RegionInfo, items: Item[]) => {\n  return items.map(item => ({\n    ...item,\n    total: getVariantPrice(item.variant, region),\n  }))\n}\n\nconst calculateSessionCartTotal = (items: Item[]) => {\n  return items.reduce(\n    (total, item) => total + item.quantity * (item.total || 0),\n    0\n  )\n}\n\ninterface SessionCartProviderProps {\n  children: React.ReactNode\n  initialState?: SessionCartState\n}\n\nconst defaultInitialState: SessionCartState = {\n  region: {} as RegionInfo,\n  items: [],\n  total: 0,\n  totalItems: 0,\n}\n\nexport const SessionCartProvider = ({\n  initialState = defaultInitialState,\n  children,\n}: SessionCartProviderProps) => {\n  const [saved, save] = useLocalStorage(\n    \"medusa-session-cart\",\n    JSON.stringify(initialState)\n  )\n\n  const [state, dispatch] = React.useReducer(reducer, JSON.parse(saved))\n\n  useEffect(() => {\n    save(JSON.stringify(state))\n  }, [state, save])\n\n  const setRegion = (region: RegionInfo) => {\n    if (!isObject(region) || isEmpty(region)) {\n      throw new Error(\"region must be a non-empty object\")\n    }\n\n    dispatch({ type: ACTION_TYPES.SET_REGION, payload: region })\n  }\n\n  const getItem = (id: string) => {\n    return state.items.find(item => item.variant.id === id)\n  }\n\n  const setItems = (items: Item[]) => {\n    if (!isArray(items)) {\n      throw new Error(\"items must be an array of items\")\n    }\n\n    dispatch({ type: ACTION_TYPES.SET_ITEMS, payload: items })\n  }\n\n  const addItem = (item: Item) => {\n    if (!isObject(item) || isEmpty(item)) {\n      throw new Error(\"item must be a non-empty object\")\n    }\n\n    dispatch({ type: ACTION_TYPES.ADD_ITEM, payload: item })\n  }\n\n  const updateItem = (id: string, item: Partial<Item>) => {\n    dispatch({ type: ACTION_TYPES.UPDATE_ITEM, payload: { id, item } })\n  }\n\n  const updateItemQuantity = (id: string, quantity: number) => {\n    const item = getItem(id)\n    if (!item) return\n\n    quantity = quantity <= 0 ? 1 : quantity\n\n    dispatch({\n      type: ACTION_TYPES.UPDATE_ITEM,\n      payload: {\n        id,\n        item: {\n          ...item,\n          quantity: Math.min(item.variant.inventory_quantity, quantity),\n        },\n      },\n    })\n  }\n\n  const incrementItemQuantity = (id: string) => {\n    const item = getItem(id)\n    if (!item) return\n\n    dispatch({\n      type: ACTION_TYPES.UPDATE_ITEM,\n      payload: {\n        id,\n        item: {\n          ...item,\n          quantity: Math.min(\n            item.variant.inventory_quantity,\n            item.quantity + 1\n          ),\n        },\n      },\n    })\n  }\n\n  const decrementItemQuantity = (id: string) => {\n    const item = getItem(id)\n    if (!item) return\n\n    dispatch({\n      type: ACTION_TYPES.UPDATE_ITEM,\n      payload: {\n        id,\n        item: { ...item, quantity: Math.max(0, item.quantity - 1) },\n      },\n    })\n  }\n\n  const removeItem = (id: string) => {\n    dispatch({\n      type: ACTION_TYPES.REMOVE_ITEM,\n      payload: { id },\n    })\n  }\n\n  const clearItems = () => {\n    dispatch({\n      type: ACTION_TYPES.CLEAR_ITEMS,\n    })\n  }\n\n  return (\n    <SessionCartContext.Provider\n      value={{\n        ...state,\n        setRegion,\n        addItem,\n        updateItem,\n        updateItemQuantity,\n        incrementItemQuantity,\n        decrementItemQuantity,\n        removeItem,\n        getItem,\n        setItems,\n        clearItems,\n      }}\n    >\n      {children}\n    </SessionCartContext.Provider>\n  )\n}\n\nexport const useSessionCart = () => {\n  const context = useContext(SessionCartContext)\n  if (!context) {\n    throw new Error(\n      \"useSessionCart should be used as a child of SessionCartProvider\"\n    )\n  }\n  return context\n}\n","import { TQueryKey } from \"../../types\"\n\nexport const queryKeysFactory = <\n  T,\n  TListQueryType = any,\n  TDetailQueryType = string\n>(\n  globalKey: T\n) => {\n  const queryKeyFactory: TQueryKey<T, TListQueryType, TDetailQueryType> = {\n    all: [globalKey],\n    lists: () => [...queryKeyFactory.all, \"list\"],\n    list: (query?: TListQueryType) => [...queryKeyFactory.lists(), { query }],\n    details: () => [...queryKeyFactory.all, \"detail\"],\n    detail: (id: TDetailQueryType) => [...queryKeyFactory.details(), id],\n  }\n  return queryKeyFactory\n}\n","import { isEmpty } from \"lodash\"\nimport { RegionInfo, ProductVariantInfo } from \"../types\"\n\ntype FormatVariantPriceParams = {\n  variant: ProductVariantInfo\n  region: RegionInfo\n  includeTaxes?: boolean\n  minimumFractionDigits?: number\n  maximumFractionDigits?: number\n  locale?: string\n}\n\n/**\n * Takes a product variant and a region, and converts the variant's price to a localized decimal format\n */\nexport const formatVariantPrice = ({\n  variant,\n  region,\n  includeTaxes = true,\n  ...rest\n}: FormatVariantPriceParams) => {\n  const amount = computeVariantPrice({ variant, region, includeTaxes })\n\n  return convertToLocale({\n    amount,\n    currency_code: region?.currency_code,\n    ...rest,\n  })\n}\n\ntype ComputeVariantPriceParams = {\n  variant: ProductVariantInfo\n  region: RegionInfo\n  includeTaxes?: boolean\n}\n\n/**\n * Takes a product variant and region, and returns the variant price as a decimal number\n * @param params.variant - product variant\n * @param params.region - region\n * @param params.includeTaxes - whether to include taxes or not\n */\nexport const computeVariantPrice = ({\n  variant,\n  region,\n  includeTaxes = true,\n}: ComputeVariantPriceParams) => {\n  const amount = getVariantPrice(variant, region)\n\n  return computeAmount({\n    amount,\n    region,\n    includeTaxes,\n  })\n}\n\n/**\n * Finds the price amount correspoding to the region selected\n * @param variant - the product variant\n * @param region - the region\n * @returns - the price's amount\n */\nexport const getVariantPrice = (\n  variant: ProductVariantInfo,\n  region: RegionInfo\n) => {\n  let price = variant?.prices?.find(\n    p => p.currency_code.toLowerCase() === region?.currency_code?.toLowerCase()\n  )\n\n  return price?.amount || 0\n}\n\ntype ComputeAmountParams = {\n  amount: number\n  region: RegionInfo\n  includeTaxes?: boolean\n}\n\n/**\n * Takes an amount, a region, and returns the amount as a decimal including or excluding taxes\n */\nexport const computeAmount = ({\n  amount,\n  region,\n  includeTaxes = true,\n}: ComputeAmountParams) => {\n  const toDecimal = convertToDecimal(amount, region)\n\n  const taxRate = includeTaxes ? getTaxRate(region) : 0\n\n  const amountWithTaxes = toDecimal * (1 + taxRate)\n\n  return amountWithTaxes\n}\n\ntype FormatAmountParams = {\n  amount: number\n  region: RegionInfo\n  includeTaxes?: boolean\n  minimumFractionDigits?: number\n  maximumFractionDigits?: number\n  locale?: string\n}\n\n/**\n * Takes an amount and a region, and converts the amount to a localized decimal format\n */\nexport const formatAmount = ({\n  amount,\n  region,\n  includeTaxes = true,\n  ...rest\n}: FormatAmountParams) => {\n  const taxAwareAmount = computeAmount({\n    amount,\n    region,\n    includeTaxes,\n  })\n  return convertToLocale({\n    amount: taxAwareAmount,\n    currency_code: region.currency_code,\n    ...rest,\n  })\n}\n\n// we should probably add a more extensive list\nconst noDivisionCurrencies = [\"krw\", \"jpy\", \"vnd\"]\n\nconst convertToDecimal = (amount: number, region: RegionInfo) => {\n  const divisor = noDivisionCurrencies.includes(\n    region?.currency_code?.toLowerCase()\n  )\n    ? 1\n    : 100\n\n  return Math.floor(amount) / divisor\n}\n\nconst getTaxRate = (region?: RegionInfo) => {\n  return region && !isEmpty(region) ? region?.tax_rate / 100 : 0\n}\n\nconst convertToLocale = ({\n  amount,\n  currency_code,\n  minimumFractionDigits,\n  maximumFractionDigits,\n  locale = \"en-US\",\n}: ConvertToLocaleParams) => {\n  return currency_code && !isEmpty(currency_code)\n    ? new Intl.NumberFormat(locale, {\n        style: \"currency\",\n        currency: currency_code,\n        minimumFractionDigits,\n        maximumFractionDigits,\n      }).format(amount)\n    : amount.toString()\n}\n\ntype ConvertToLocaleParams = {\n  amount: number\n  currency_code: string\n  minimumFractionDigits?: number\n  maximumFractionDigits?: number\n  locale?: string\n}\n","import { Response } from \"@medusajs/medusa-js\"\nimport {\n  StoreGetProductsParams,\n  StoreProductsListRes,\n  StoreProductsRes,\n} from \"@medusajs/medusa\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst PRODUCTS_QUERY_KEY = `products` as const\n\nexport const productKeys = queryKeysFactory<\n  typeof PRODUCTS_QUERY_KEY,\n  StoreGetProductsParams\n>(PRODUCTS_QUERY_KEY)\ntype ProductQueryKey = typeof productKeys\n\nexport const useProducts = (\n  query?: StoreGetProductsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreProductsListRes>,\n    Error,\n    ReturnType<ProductQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    productKeys.list(query),\n    () => client.products.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useProduct = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreProductsRes>,\n    Error,\n    ReturnType<ProductQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    productKeys.detail(id),\n    () => client.products.retrieve(id),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n","import { queryKeysFactory } from \"../../utils/index\"\nimport { StoreCartsRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\n\nconst CARTS_QUERY_KEY = `carts` as const\n\nexport const cartKeys = queryKeysFactory(CARTS_QUERY_KEY)\ntype CartQueryKey = typeof cartKeys\n\nexport const useGetCart = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreCartsRes>,\n    Error,\n    ReturnType<CartQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    cartKeys.detail(id),\n    () => client.carts.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","import {\n  StoreCartsRes,\n  StoreCompleteCartRes,\n  StorePostCartReq,\n  StorePostCartsCartPaymentSessionReq,\n  StorePostCartsCartPaymentSessionUpdateReq,\n  StorePostCartsCartReq,\n  StorePostCartsCartShippingMethodReq,\n} from \"@medusajs/medusa\"\nimport { useMutation, UseMutationOptions } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\n\nexport const useCreateCart = (\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    StorePostCartReq | undefined\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data?: StorePostCartReq | undefined) => client.carts.create(data),\n    options\n  )\n}\n\nexport const useUpdateCart = (\n  cartId: string,\n  options?: UseMutationOptions<StoreCartsRes, Error, StorePostCartsCartReq>\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostCartsCartReq) => client.carts.update(cartId, data),\n    options\n  )\n}\n\nexport const useCompleteCart = (\n  cartId: string,\n  options?: UseMutationOptions<StoreCompleteCartRes, Error>\n) => {\n  const { client } = useMedusa()\n  return useMutation(() => client.carts.complete(cartId), options)\n}\n\nexport const useCreatePaymentSession = (\n  cartId: string,\n  options?: UseMutationOptions<StoreCartsRes, Error>\n) => {\n  const { client } = useMedusa()\n  return useMutation(() => client.carts.createPaymentSessions(cartId), options)\n}\n\nexport const useUpdatePaymentSession = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    { provider_id: string } & StorePostCartsCartPaymentSessionUpdateReq\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    ({ data, provider_id }) =>\n      client.carts.updatePaymentSession(cartId, provider_id, { data }),\n    options\n  )\n}\n\ntype RefreshPaymentSessionMutationData = {\n  provider_id: string\n}\n\nexport const useRefreshPaymentSession = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    RefreshPaymentSessionMutationData\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    ({ provider_id }: RefreshPaymentSessionMutationData) =>\n      client.carts.refreshPaymentSession(cartId, provider_id),\n    options\n  )\n}\n\ntype SetPaymentSessionMutationData = { provider_id: string }\n\nexport const useSetPaymentSession = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    SetPaymentSessionMutationData\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostCartsCartPaymentSessionReq) =>\n      client.carts.setPaymentSession(cartId, data),\n    options\n  )\n}\n\nexport const useAddShippingMethodToCart = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    StorePostCartsCartShippingMethodReq\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostCartsCartShippingMethodReq) =>\n      client.carts.addShippingMethod(cartId, data),\n    options\n  )\n}\n\ntype DeletePaymentSessionMutationData = {\n  provider_id: string\n}\n\nexport const useDeletePaymentSession = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    DeletePaymentSessionMutationData\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    ({ provider_id }: DeletePaymentSessionMutationData) =>\n      client.carts.deletePaymentSession(cartId, provider_id),\n    options\n  )\n}\n\nexport const useStartCheckout = (\n  options?: UseMutationOptions<StoreCartsRes[\"cart\"], Error, StorePostCartReq>\n) => {\n  const { client } = useMedusa()\n  const mutation = useMutation(async (data?: StorePostCartReq) => {\n    const { cart } = await client.carts.create(data)\n    const res = await client.carts.createPaymentSessions(cart.id)\n    return res.cart\n  }, options)\n\n  return mutation\n}\n","import { queryKeysFactory } from \"../../utils/index\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport {\n  StoreShippingOptionsListRes,\n  StoreGetShippingOptionsParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\n\nconst SHIPPING_OPTION_QUERY_KEY = `shipping_options` as const\n\nconst shippingOptionKey = {\n  ...queryKeysFactory(SHIPPING_OPTION_QUERY_KEY),\n  cart: (cartId: string) => [...shippingOptionKey.all, \"cart\", cartId] as const,\n}\n\ntype ShippingOptionQueryKey = typeof shippingOptionKey\n\nexport const useShippingOptions = (\n  query?: StoreGetShippingOptionsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreShippingOptionsListRes>,\n    Error,\n    ReturnType<ShippingOptionQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    shippingOptionKey.list(query),\n    async () => client.shippingOptions.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useCartShippingOptions = (\n  cartId: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreShippingOptionsListRes>,\n    Error,\n    ReturnType<ShippingOptionQueryKey[\"cart\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    shippingOptionKey.cart(cartId),\n    async () => client.shippingOptions.listCartOptions(cartId),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import { queryKeysFactory } from \"../../utils/index\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { StoreRegionsRes, StoreRegionsListRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\n\nconst REGIONS_QUERY_KEY = `regions` as const\n\nconst regionsKey = queryKeysFactory(REGIONS_QUERY_KEY)\n\ntype RegionQueryType = typeof regionsKey\n\nexport const useRegions = (\n  options?: UseQueryOptionsWrapper<\n    Response<StoreRegionsListRes>,\n    Error,\n    ReturnType<RegionQueryType[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    regionsKey.lists(),\n    () => client.regions.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useRegion = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreRegionsRes>,\n    Error,\n    ReturnType<RegionQueryType[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    regionsKey.detail(id),\n    () => client.regions.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import { queryKeysFactory } from \"../../utils/index\"\nimport {\n  StoreReturnReasonsListRes,\n  StoreReturnReasonsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\n\nconst RETURNS_REASONS_QUERY_KEY = `return_reasons` as const\n\nconst returnReasonsKey = queryKeysFactory(RETURNS_REASONS_QUERY_KEY)\n\ntype ReturnReasonsQueryKey = typeof returnReasonsKey\n\nexport const useReturnReasons = (\n  options?: UseQueryOptionsWrapper<\n    Response<StoreReturnReasonsListRes>,\n    Error,\n    ReturnType<ReturnReasonsQueryKey[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    returnReasonsKey.lists(),\n    () => client.returnReasons.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useReturnReason = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreReturnReasonsRes>,\n    Error,\n    ReturnType<ReturnReasonsQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    returnReasonsKey.detail(id),\n    () => client.returnReasons.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import { queryKeysFactory } from \"../../utils/index\"\nimport { StoreSwapsRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\n\nconst SWAPS_QUERY_KEY = `swaps` as const\n\nconst swapKey = {\n  ...queryKeysFactory(SWAPS_QUERY_KEY),\n  cart: (cartId: string) => [...swapKey.all, \"cart\", cartId] as const,\n}\n\ntype SwapQueryKey = typeof swapKey\n\nexport const useCartSwap = (\n  cartId: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreSwapsRes>,\n    Error,\n    ReturnType<SwapQueryKey[\"cart\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    swapKey.cart(cartId),\n    () => client.swaps.retrieveByCartId(cartId),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n","import { queryKeysFactory } from \"../../utils/index\"\nimport { StoreOrdersRes, StoreGetOrdersParams } from \"@medusajs/medusa\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { Response } from \"@medusajs/medusa-js\"\n\nconst ORDERS_QUERY_KEY = `orders` as const\n\nexport const orderKeys = {\n  ...queryKeysFactory<typeof ORDERS_QUERY_KEY, StoreGetOrdersParams>(\n    ORDERS_QUERY_KEY\n  ),\n  cart: (cartId: string) => [...orderKeys.details(), \"cart\", cartId] as const,\n}\n\ntype OrderQueryKey = typeof orderKeys\n\nexport const useOrder = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreOrdersRes>,\n    Error,\n    ReturnType<OrderQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    orderKeys.detail(id),\n    () => client.orders.retrieve(id),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n\nexport const useCartOrder = (\n  cartId: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreOrdersRes>,\n    Error,\n    ReturnType<OrderQueryKey[\"cart\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    orderKeys.cart(cartId),\n    () => client.orders.retrieveByCartId(cartId),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n\nexport const useOrders = (\n  query: StoreGetOrdersParams,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreOrdersRes>,\n    Error,\n    ReturnType<OrderQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    orderKeys.list(query),\n    () => client.orders.lookupOrder(query),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n","import {\n  StoreCustomersListOrdersRes,\n  StoreCustomersRes,\n  StoreGetCustomersCustomerOrdersParams,\n} from \"@medusajs/medusa\"\nimport { useQuery } from \"react-query\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst CUSTOMERS_QUERY_KEY = `customers` as const\n\nexport const customerKeys = {\n  ...queryKeysFactory(CUSTOMERS_QUERY_KEY),\n  orders: (id: string) => [...customerKeys.detail(id), \"orders\"] as const,\n}\n\ntype CustomerQueryKey = typeof customerKeys\n\nexport const useMeCustomer = (\n  options?: UseQueryOptionsWrapper<\n    Response<StoreCustomersRes>,\n    Error,\n    ReturnType<CustomerQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    customerKeys.detail(\"me\"),\n    () => client.customers.retrieve(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useCustomerOrders = (\n  query: StoreGetCustomersCustomerOrdersParams = { limit: 10, offset: 0 },\n  options?: UseQueryOptionsWrapper<\n    Response<StoreCustomersListOrdersRes>,\n    Error,\n    ReturnType<CustomerQueryKey[\"orders\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    customerKeys.orders(\"me\"),\n    () => client.customers.listOrders(query),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n","import { queryKeysFactory } from \"../../utils/index\"\nimport { StoreGiftCardsRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\n\nconst GIFT_CARDS_QUERY_KEY = `gift_cards` as const\n\nexport const giftCardKeys = queryKeysFactory(GIFT_CARDS_QUERY_KEY)\n\ntype GiftCardQueryKey = typeof giftCardKeys\n\nexport const useGiftCard = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreGiftCardsRes>,\n    Error,\n    ReturnType<GiftCardQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    giftCardKeys.detail(id),\n    () => client.giftCards.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  StoreCollectionsListRes,\n  StoreCollectionsRes,\n  StoreGetCollectionsParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst COLLECTIONS_QUERY_KEY = `collections` as const\n\nexport const collectionKeys = queryKeysFactory(COLLECTIONS_QUERY_KEY)\n\ntype CollectionQueryKey = typeof collectionKeys\n\nexport const useCollection = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreCollectionsRes>,\n    Error,\n    ReturnType<CollectionQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    collectionKeys.detail(id),\n    () => client.collections.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useCollections = (\n  query?: StoreGetCollectionsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreCollectionsListRes>,\n    Error,\n    ReturnType<CollectionQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    collectionKeys.list(query),\n    () => client.collections.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import React, { useState } from \"react\"\nimport {\n  useAddShippingMethodToCart,\n  useCompleteCart,\n  useCreateCart,\n  useSetPaymentSession,\n  useUpdateCart,\n  useCreatePaymentSession,\n} from \"../hooks/store/\"\nimport { Cart } from \"../types\"\n\ninterface CartState {\n  cart?: Cart\n}\n\ninterface CartContext extends CartState {\n  setCart: (cart: Cart) => void\n  pay: ReturnType<typeof useSetPaymentSession>\n  createCart: ReturnType<typeof useCreateCart>\n  startCheckout: ReturnType<typeof useCreatePaymentSession>\n  completeCheckout: ReturnType<typeof useCompleteCart>\n  updateCart: ReturnType<typeof useUpdateCart>\n  addShippingMethod: ReturnType<typeof useAddShippingMethodToCart>\n  totalItems: number\n}\n\nconst CartContext = React.createContext<CartContext | null>(null)\n\nexport const useCart = () => {\n  const context = React.useContext(CartContext)\n  if (!context) {\n    throw new Error(\"useCart must be used within a CartProvider\")\n  }\n  return context\n}\n\ninterface CartProps {\n  children: React.ReactNode\n  initialState?: Cart\n}\n\nconst defaultInitialState = {\n  id: \"\",\n  items: [] as any,\n} as Cart\n\nexport const CartProvider = ({\n  children,\n  initialState = defaultInitialState,\n}: CartProps) => {\n  const [cart, setCart] = useState<Cart>(initialState)\n\n  const createCart = useCreateCart({\n    onSuccess: ({ cart }) => setCart(cart),\n  })\n\n  const updateCart = useUpdateCart(cart?.id, {\n    onSuccess: ({ cart }) => setCart(cart),\n  })\n\n  const addShippingMethod = useAddShippingMethodToCart(cart?.id, {\n    onSuccess: ({ cart }) => setCart(cart),\n  })\n\n  const startCheckout = useCreatePaymentSession(cart?.id, {\n    onSuccess: ({ cart }) => setCart(cart),\n  })\n\n  const pay = useSetPaymentSession(cart?.id, {\n    onSuccess: ({ cart }) => {\n      setCart(cart)\n    },\n  })\n\n  const completeCheckout = useCompleteCart(cart?.id)\n\n  const totalItems = cart?.items\n    .map(i => i.quantity)\n    .reduce((acc, curr) => acc + curr, 0)\n\n  return (\n    <CartContext.Provider\n      value={{\n        cart,\n        setCart,\n        createCart,\n        pay,\n        startCheckout,\n        completeCheckout,\n        updateCart,\n        addShippingMethod,\n        totalItems: totalItems || 0,\n      }}\n    >\n      {children}\n    </CartContext.Provider>\n  )\n}\n","import { AdminAuthRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_AUTH_QUERY_KEY = `admin_auth` as const\n\nexport const adminAuthKeys = queryKeysFactory(ADMIN_AUTH_QUERY_KEY)\n\ntype AuthQueryKey = typeof adminAuthKeys\n\nexport const useAdminGetSession = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminAuthRes>,\n    Error,\n    ReturnType<AuthQueryKey[\"details\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminAuthKeys.details(),\n    () => client.admin.auth.getSession(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import { QueryClient, QueryKey, UseMutationOptions } from \"react-query\"\n\nexport const buildOptions = <\n  TData,\n  TError,\n  TVariables,\n  TContext,\n  TKey extends Array<QueryKey>\n>(\n  queryClient: QueryClient,\n  queryKey?: TKey[] | TKey,\n  options?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationOptions<TData, TError, TVariables, TContext> => {\n  return {\n    ...options,\n    onSuccess: (...args) => {\n      if (options?.onSuccess) {\n        return options.onSuccess(...args)\n      }\n\n      if (queryKey !== undefined) {\n        if (queryKey.filter(Array.isArray).length > 0) {\n          queryKey.forEach(key => queryClient.invalidateQueries(key))\n        } else {\n          queryClient.invalidateQueries(queryKey)\n        }\n      }\n    },\n  }\n}\n","import {\n  AdminBatchJobListRes,\n  AdminBatchJobRes,\n  AdminGetBatchParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_COLLECTIONS_QUERY_KEY = `admin_batches` as const\n\nexport const adminBatchJobsKeys = queryKeysFactory(ADMIN_COLLECTIONS_QUERY_KEY)\n\ntype BatchJobsQueryKey = typeof adminBatchJobsKeys\n\nexport const useAdminBatchJobs = (\n  query?: AdminGetBatchParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminBatchJobListRes>,\n    Error,\n    ReturnType<BatchJobsQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminBatchJobsKeys.list(query),\n    () => client.admin.batchJobs.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminBatchJob = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminBatchJobRes>,\n    Error,\n    ReturnType<BatchJobsQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminBatchJobsKeys.detail(id),\n    () => client.admin.batchJobs.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminOrdersListRes,\n  AdminOrdersRes,\n  AdminGetOrdersParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_ORDERS_QUERY_KEY = `admin_orders` as const\n\nexport const adminOrderKeys = queryKeysFactory(ADMIN_ORDERS_QUERY_KEY)\n\ntype OrderQueryKeys = typeof adminOrderKeys\n\nexport const useAdminOrders = (\n  query?: AdminGetOrdersParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminOrdersListRes>,\n    Error,\n    ReturnType<OrderQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminOrderKeys.list(query),\n    () => client.admin.orders.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminOrder = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminOrdersRes>,\n    Error,\n    ReturnType<OrderQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminOrderKeys.detail(id),\n    () => client.admin.orders.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminCollectionsListRes,\n  AdminCollectionsRes,\n  AdminGetCollectionsParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_COLLECTIONS_QUERY_KEY = `admin_collections` as const\n\nexport const adminCollectionKeys = queryKeysFactory(ADMIN_COLLECTIONS_QUERY_KEY)\n\ntype CollectionsQueryKey = typeof adminCollectionKeys\n\nexport const useAdminCollections = (\n  query?: AdminGetCollectionsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCollectionsListRes>,\n    Error,\n    ReturnType<CollectionsQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCollectionKeys.list(query),\n    () => client.admin.collections.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminCollection = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCollectionsRes>,\n    Error,\n    ReturnType<CollectionsQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCollectionKeys.detail(id),\n    () => client.admin.collections.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminCustomerGroupsListRes,\n  AdminCustomerGroupsRes,\n  AdminCustomersListRes,\n  AdminGetCustomerGroupsGroupParams,\n  AdminGetCustomerGroupsParams,\n  AdminGetCustomersParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ADMIN_CUSTOMER_GROUPS_QUERY_KEY = `admin_customer_groups` as const\n\nexport const adminCustomerGroupKeys = {\n  ...queryKeysFactory(ADMIN_CUSTOMER_GROUPS_QUERY_KEY),\n  detailCustomer(id: string, query?: AdminGetCustomersParams) {\n    return [...this.detail(id), \"customers\", { ...(query || {}) }]\n  },\n}\n\ntype CustomerGroupQueryKeys = typeof adminCustomerGroupKeys\n\n/**\n * Hook retrieves a customer group by id.\n *\n * @param id - customer group id\n * @param query - query params\n * @param options\n */\nexport const useAdminCustomerGroup = (\n  id: string,\n  query?: AdminGetCustomerGroupsGroupParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCustomerGroupsRes>,\n    Error,\n    ReturnType<CustomerGroupQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCustomerGroupKeys.detail(id),\n    () => client.admin.customerGroups.retrieve(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\n/**\n * Hook retrieves a list of customer groups.\n *\n * @param query - pagination/filtering params\n * @param options\n */\nexport const useAdminCustomerGroups = (\n  query?: AdminGetCustomerGroupsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCustomerGroupsListRes>,\n    Error,\n    ReturnType<CustomerGroupQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCustomerGroupKeys.list(query),\n    () => client.admin.customerGroups.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\n/**\n * Hook retrieves a list of customers that belong to provided groups.\n *\n * @param id - customer group id\n * @param query - pagination/filtering params\n * @param options\n */\nexport const useAdminCustomerGroupCustomers = (\n  id: string,\n  query?: AdminGetCustomersParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCustomersListRes>,\n    Error,\n    ReturnType<CustomerGroupQueryKeys[\"detailCustomer\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCustomerGroupKeys.detailCustomer(id, query),\n    () => client.admin.customerGroups.listCustomers(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminCustomersListRes,\n  AdminCustomersRes,\n  AdminGetCustomersParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ADMIN_CUSTOMERS_QUERY_KEY = `admin_customers` as const\n\nexport const adminCustomerKeys = queryKeysFactory(ADMIN_CUSTOMERS_QUERY_KEY)\n\ntype CustomerQueryKeys = typeof adminCustomerKeys\n\nexport const useAdminCustomers = (\n  query?: AdminGetCustomersParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCustomersListRes>,\n    Error,\n    ReturnType<CustomerQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCustomerKeys.list(query),\n    () => client.admin.customers.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminCustomer = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCustomersRes>,\n    Error,\n    ReturnType<CustomerQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCustomerKeys.detail(id),\n    () => client.admin.customers.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminDiscountConditionsRes,\n  AdminDiscountsListRes,\n  AdminDiscountsRes,\n  AdminGetDiscountParams,\n  AdminGetDiscountsDiscountConditionsConditionParams,\n  AdminGetDiscountsParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_DISCOUNTS_QUERY_KEY = `admin_discounts` as const\n\nexport const adminDiscountKeys = {\n  ...queryKeysFactory(ADMIN_DISCOUNTS_QUERY_KEY),\n  detailCondition(id: string, query?: any) {\n    return [\n      ...this.detail(id),\n      \"condition\" as const,\n      { ...(query || {}) },\n    ] as const\n  },\n}\n\ntype DiscountQueryKeys = typeof adminDiscountKeys\n\nexport const useAdminDiscounts = (\n  query?: AdminGetDiscountsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminDiscountsListRes>,\n    Error,\n    ReturnType<DiscountQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminDiscountKeys.list(query),\n    () => client.admin.discounts.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminDiscount = (\n  id: string,\n  query?: AdminGetDiscountParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminDiscountsRes>,\n    Error,\n    ReturnType<DiscountQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminDiscountKeys.detail(id),\n    () => client.admin.discounts.retrieve(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminGetDiscountByCode = (\n  code: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminDiscountsRes>,\n    Error,\n    ReturnType<DiscountQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminDiscountKeys.detail(code),\n    () => client.admin.discounts.retrieveByCode(code),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminGetDiscountCondition = (\n  id: string,\n  conditionId: string,\n  query?: AdminGetDiscountsDiscountConditionsConditionParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminDiscountConditionsRes>,\n    Error,\n    ReturnType<DiscountQueryKeys[\"detailCondition\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminDiscountKeys.detailCondition(conditionId),\n    () => client.admin.discounts.getCondition(id, conditionId, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminDraftOrdersListRes,\n  AdminDraftOrdersRes,\n  AdminGetDraftOrdersParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_DRAFT_ORDERS_QUERY_KEY = `admin_draft_orders` as const\n\nexport const adminDraftOrderKeys = queryKeysFactory(\n  ADMIN_DRAFT_ORDERS_QUERY_KEY\n)\n\ntype DraftOrderQueryKeys = typeof adminDraftOrderKeys\n\nexport const useAdminDraftOrders = (\n  query?: AdminGetDraftOrdersParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminDraftOrdersListRes>,\n    Error,\n    ReturnType<DraftOrderQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminDraftOrderKeys.list(query),\n    () => client.admin.draftOrders.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminDraftOrder = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminDraftOrdersRes>,\n    Error,\n    ReturnType<DraftOrderQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminDraftOrderKeys.detail(id),\n    () => client.admin.draftOrders.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminGiftCardsListRes,\n  AdminGiftCardsRes,\n  AdminGetGiftCardsParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_GIFT_CARDS_QUERY_KEY = `admin_gift_cards` as const\n\nexport const adminGiftCardKeys = queryKeysFactory(ADMIN_GIFT_CARDS_QUERY_KEY)\n\ntype GiftCardQueryKeys = typeof adminGiftCardKeys\n\nexport const useAdminGiftCards = (\n  query?: AdminGetGiftCardsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminGiftCardsListRes>,\n    Error,\n    ReturnType<GiftCardQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminGiftCardKeys.list(query),\n    () => client.admin.giftCards.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminGiftCard = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminGiftCardsRes>,\n    Error,\n    ReturnType<GiftCardQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminGiftCardKeys.detail(id),\n    () => client.admin.giftCards.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import { AdminListInvitesRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_INVITES_QUERY_KEY = `admin_invites` as const\n\nexport const adminInviteKeys = queryKeysFactory(ADMIN_INVITES_QUERY_KEY)\n\ntype InviteQueryKeys = typeof adminInviteKeys\n\nexport const useAdminInvites = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminListInvitesRes>,\n    Error,\n    ReturnType<InviteQueryKeys[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminInviteKeys.lists(),\n    () => client.admin.invites.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminNotesListRes,\n  AdminNotesRes,\n  AdminGetNotesParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_NOTE_QUERY_KEY = `admin_notes` as const\n\nexport const adminNoteKeys = queryKeysFactory(ADMIN_NOTE_QUERY_KEY)\n\ntype NoteQueryKeys = typeof adminNoteKeys\n\nexport const useAdminNotes = (\n  query?: AdminGetNotesParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminNotesListRes>,\n    Error,\n    ReturnType<NoteQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminNoteKeys.list(query),\n    () => client.admin.notes.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminNote = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminNotesRes>,\n    Error,\n    ReturnType<NoteQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminNoteKeys.detail(id),\n    () => client.admin.notes.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminGetNotificationsParams,\n  AdminNotificationsListRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_NOTIFICATIONS_QUERY_KEY = `admin_notifications` as const\n\nexport const adminNotificationKeys = queryKeysFactory(\n  ADMIN_NOTIFICATIONS_QUERY_KEY\n)\n\ntype NotificationQueryKeys = typeof adminNotificationKeys\n\nexport const useAdminNotifications = (\n  query?: AdminGetNotificationsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminNotificationsListRes>,\n    Error,\n    ReturnType<NotificationQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminNotificationKeys.list(query),\n    () => client.admin.notifications.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminGetPriceListsPriceListProductsParams,\n  AdminGetPriceListPaginationParams,\n  AdminPriceListsListRes,\n  AdminPriceListRes,\n  AdminProductsListRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_PRICE_LISTS_QUERY_KEY = `admin_price_lists` as const\n\nexport const adminPriceListKeys = {\n  ...queryKeysFactory(ADMIN_PRICE_LISTS_QUERY_KEY),\n  detailProducts(id: string, query?: any) {\n    return [\n      ...this.detail(id),\n      \"products\" as const,\n      { ...(query || {}) },\n    ] as const\n  }\n}\n\ntype PriceListQueryKeys = typeof adminPriceListKeys\n\nexport const useAdminPriceLists = (\n  query?: AdminGetPriceListPaginationParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminPriceListsListRes>,\n    Error,\n    ReturnType<PriceListQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminPriceListKeys.list(query),\n    () => client.admin.priceLists.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminPriceListProducts = (\n  id: string,\n  query?: AdminGetPriceListsPriceListProductsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductsListRes>,\n    Error,\n    ReturnType<PriceListQueryKeys[\"detailProducts\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminPriceListKeys.detailProducts(id, query),\n    () => client.admin.priceLists.listProducts(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminPriceList = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminPriceListRes>,\n    Error,\n    ReturnType<PriceListQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminPriceListKeys.detail(id),\n    () => client.admin.priceLists.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminProductsListRes,\n  AdminProductsRes,\n  AdminGetProductsParams,\n  AdminProductsListTagsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_PRODUCTS_QUERY_KEY = `admin_products` as const\n\nexport const adminProductKeys = queryKeysFactory(ADMIN_PRODUCTS_QUERY_KEY)\n\ntype ProductQueryKeys = typeof adminProductKeys\n\nexport const useAdminProducts = (\n  query?: AdminGetProductsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductsListRes>,\n    Error,\n    ReturnType<ProductQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminProductKeys.list(query),\n    () => client.admin.products.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminProduct = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductsRes>,\n    Error,\n    ReturnType<ProductQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminProductKeys.detail(id),\n    () => client.admin.products.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminProductTagUsage = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductsListTagsRes>,\n    Error,\n    ReturnType<ProductQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminProductKeys.detail(\"tags\"),\n    () => client.admin.products.listTags(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import { AdminVariantsListRes, AdminGetVariantsParams } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_VARIANT_QUERY_KEY = `admin_variants` as const\n\nexport const adminVariantKeys = queryKeysFactory(ADMIN_VARIANT_QUERY_KEY)\n\ntype VariantQueryKeys = typeof adminVariantKeys\n\nexport const useAdminVariants = (\n  query?: AdminGetVariantsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminVariantsListRes>,\n    Error,\n    ReturnType<VariantQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminVariantKeys.list(query),\n    () => client.admin.variants.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminProductTagsListRes,\n  AdminGetProductTagsParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_PRODUCT_TAGS_QUERY_KEY = `admin_product_tags` as const\n\nexport const adminProductTagKeys = queryKeysFactory(\n  ADMIN_PRODUCT_TAGS_QUERY_KEY\n)\n\ntype ProductQueryKeys = typeof adminProductTagKeys\n\nexport const useAdminProductTags = (\n  query?: AdminGetProductTagsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductTagsListRes>,\n    Error,\n    ReturnType<ProductQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminProductTagKeys.list(query),\n    () => client.admin.productTags.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminProductTypesListRes,\n  AdminGetProductTypesParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_PRODUCT_TYPES_QUERY_KEY = `admin_product_types` as const\n\nexport const adminProductTypeKeys = queryKeysFactory(\n  ADMIN_PRODUCT_TYPES_QUERY_KEY\n)\n\ntype ProductTypesQueryKeys = typeof adminProductTypeKeys\n\nexport const useAdminProductTypes = (\n  query?: AdminGetProductTypesParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductTypesListRes>,\n    Error,\n    ReturnType<ProductTypesQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminProductTypeKeys.list(query),\n    () => client.admin.productTypes.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminRegionsListRes,\n  AdminRegionsRes,\n  AdminGetRegionsParams,\n  AdminGetRegionsRegionFulfillmentOptionsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_REGIONS_QUERY_KEY = `admin_regions` as const\n\nexport const adminRegionKeys = queryKeysFactory(ADMIN_REGIONS_QUERY_KEY)\n\ntype RegionQueryKeys = typeof adminRegionKeys\n\nexport const useAdminRegions = (\n  query?: AdminGetRegionsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminRegionsListRes>,\n    Error,\n    ReturnType<RegionQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminRegionKeys.list(query),\n    () => client.admin.regions.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminRegion = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminRegionsRes>,\n    Error,\n    ReturnType<RegionQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminRegionKeys.detail(id),\n    () => client.admin.regions.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminRegionFulfillmentOptions = (\n  regionId: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminGetRegionsRegionFulfillmentOptionsRes>,\n    Error,\n    ReturnType<RegionQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminRegionKeys.detail(`${regionId}_fullfillment-options`),\n    () => client.admin.regions.retrieveFulfillmentOptions(regionId),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminReturnReasonsListRes,\n  AdminReturnReasonsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_RETURNS_REASONS_QUERY_KEY = `admin_return_reasons` as const\n\nexport const adminReturnReasonKeys = queryKeysFactory(\n  ADMIN_RETURNS_REASONS_QUERY_KEY\n)\n\ntype ReturnReasonQueryKeys = typeof adminReturnReasonKeys\n\nexport const useAdminReturnReasons = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminReturnReasonsListRes>,\n    Error,\n    ReturnType<ReturnReasonQueryKeys[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminReturnReasonKeys.lists(),\n    () => client.admin.returnReasons.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminReturnReason = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminReturnReasonsRes>,\n    Error,\n    ReturnType<ReturnReasonQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminReturnReasonKeys.detail(id),\n    () => client.admin.returnReasons.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import { AdminReturnsListRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_RETURNS_QUERY_KEY = `admin_returns` as const\n\nexport const adminReturnKeys = queryKeysFactory(ADMIN_RETURNS_QUERY_KEY)\n\ntype ReturnQueryKeys = typeof adminReturnKeys\n\nexport const useAdminReturns = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminReturnsListRes>,\n    Error,\n    ReturnType<ReturnQueryKeys[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminReturnKeys.lists(),\n    () => client.admin.returns.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminGetShippingOptionsParams,\n  AdminShippingOptionsListRes,\n  AdminShippingOptionsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_SHIPPING_OPTIONS_QUERY_KEY = `admin_shipping_options` as const\n\nexport const adminShippingOptionKeys = queryKeysFactory(\n  ADMIN_SHIPPING_OPTIONS_QUERY_KEY\n)\n\ntype ShippingOptionQueryKeys = typeof adminShippingOptionKeys\n\nexport const useAdminShippingOptions = (\n  query?: AdminGetShippingOptionsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminShippingOptionsListRes>,\n    Error,\n    ReturnType<ShippingOptionQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminShippingOptionKeys.list(query),\n    () => client.admin.shippingOptions.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminShippingOption = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminShippingOptionsRes>,\n    Error,\n    ReturnType<ShippingOptionQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminShippingOptionKeys.detail(id),\n    () => client.admin.shippingOptions.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminShippingProfilesListRes,\n  AdminShippingProfilesRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_COLLECTIONS_QUERY_KEY = `admin_shippingProfiles` as const\n\nexport const adminShippingProfileKeys = queryKeysFactory(\n  ADMIN_COLLECTIONS_QUERY_KEY\n)\n\ntype ShippingProfileQueryKeys = typeof adminShippingProfileKeys\n\nexport const useAdminShippingProfiles = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminShippingProfilesListRes>,\n    Error,\n    ReturnType<ShippingProfileQueryKeys[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminShippingProfileKeys.lists(),\n    () => client.admin.shippingProfiles.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminShippingProfile = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminShippingProfilesRes>,\n    Error,\n    ReturnType<ShippingProfileQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminShippingProfileKeys.detail(id),\n    () => client.admin.shippingProfiles.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminTaxProvidersList,\n  AdminPaymentProvidersList,\n  AdminStoresRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_STORE_QUERY_KEY = `admin_store` as const\n\nexport const adminStoreKeys = queryKeysFactory(ADMIN_STORE_QUERY_KEY)\n\ntype StoreQueryKeys = typeof adminStoreKeys\n\nexport const useAdminStorePaymentProviders = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminPaymentProvidersList>,\n    Error,\n    ReturnType<StoreQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminStoreKeys.detail(\"payment_providers\"),\n    () => client.admin.store.listPaymentProviders(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminStoreTaxProviders = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminTaxProvidersList>,\n    Error,\n    ReturnType<StoreQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminStoreKeys.detail(\"tax_providers\"),\n    () => client.admin.store.listTaxProviders(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminStore = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminStoresRes>,\n    Error,\n    ReturnType<StoreQueryKeys[\"details\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminStoreKeys.details(),\n    () => client.admin.store.retrieve(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminSwapsListRes,\n  AdminSwapsRes,\n  AdminGetSwapsParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_SWAPS_QUERY_KEY = `admin_swaps` as const\n\nexport const adminSwapKeys = queryKeysFactory(ADMIN_SWAPS_QUERY_KEY)\n\ntype SwapsQueryKey = typeof adminSwapKeys\n\nexport const useAdminSwaps = (\n  query?: AdminGetSwapsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminSwapsListRes>,\n    Error,\n    ReturnType<SwapsQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminSwapKeys.list(query),\n    () => client.admin.swaps.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminSwap = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminSwapsRes>,\n    Error,\n    ReturnType<SwapsQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminSwapKeys.detail(id),\n    () => client.admin.swaps.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminTaxRatesRes,\n  AdminTaxRatesListRes,\n  AdminGetTaxRatesParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_TAX_RATES_QUERY_KEY = `admin_tax_rates` as const\n\nexport const adminTaxRateKeys = queryKeysFactory(ADMIN_TAX_RATES_QUERY_KEY)\n\ntype TaxRateQueryKeys = typeof adminTaxRateKeys\n\nexport const useAdminTaxRates = (\n  query?: AdminGetTaxRatesParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminTaxRatesListRes>,\n    Error,\n    ReturnType<TaxRateQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminTaxRateKeys.list(query),\n    () => client.admin.taxRates.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminTaxRate = (\n  id: string,\n  query?: AdminGetTaxRatesParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminTaxRatesRes>,\n    Error,\n    ReturnType<TaxRateQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminTaxRateKeys.detail(id),\n    () => client.admin.taxRates.retrieve(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import { AdminUsersListRes, AdminUserRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_USERS_QUERY_KEY = `admin_users` as const\n\nexport const adminUserKeys = queryKeysFactory(ADMIN_USERS_QUERY_KEY)\n\ntype UserQueryKeys = typeof adminUserKeys\n\nexport const useAdminUsers = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminUsersListRes>,\n    Error,\n    ReturnType<UserQueryKeys[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminUserKeys.lists(),\n    () => client.admin.users.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminUser = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminUserRes>,\n    Error,\n    ReturnType<UserQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminUserKeys.detail(id),\n    () => client.admin.users.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import * as React from \"react\"\n\nexport const useLocalStorage = (key: string, initialState: string) => {\n  const [item, setItem] = React.useState(() => {\n    try {\n      const item =\n        typeof window !== \"undefined\" && window.localStorage.getItem(key)\n\n      return item || initialState\n    } catch (err) {\n      return initialState\n    }\n  })\n\n  const save = (data: string) => {\n    setItem(data)\n\n    if (typeof window !== \"undefined\") {\n      window.localStorage.setItem(key, data)\n    }\n  }\n\n  const remove = () => {\n    if (typeof window !== \"undefined\") {\n      window.localStorage.removeItem(key)\n    }\n  }\n\n  return [item, save, remove] as const\n}\n","import { buildOptions } from \"../../utils/buildOptions\"\nimport {\n  AdminInviteDeleteRes,\n  AdminPostInvitesInviteAcceptReq,\n} from \"@medusajs/medusa\"\nimport { Response, AdminPostInvitesPayload } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { adminInviteKeys } from \"./queries\"\n\nexport const useAdminAcceptInvite = (\n  options?: UseMutationOptions<\n    Response<void>,\n    Error,\n    AdminPostInvitesInviteAcceptReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostInvitesInviteAcceptReq) =>\n      client.admin.invites.accept(payload),\n    buildOptions(queryClient, adminInviteKeys.lists(), options)\n  )\n}\n\nexport const useAdminResendInvite = (\n  id: string,\n  options?: UseMutationOptions\n) => {\n  const { client } = useMedusa()\n  return useMutation(() => client.admin.invites.resend(id), options)\n}\n\nexport const useAdminCreateInvite = (\n  options?: UseMutationOptions<Response<void>, Error, AdminPostInvitesPayload>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostInvitesPayload) => client.admin.invites.create(payload),\n    buildOptions(queryClient, adminInviteKeys.lists(), options)\n  )\n}\n\nexport const useAdminDeleteInvite = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminInviteDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.invites.delete(id),\n    buildOptions(\n      queryClient,\n      [adminInviteKeys.lists(), adminInviteKeys.detail(id)],\n      options\n    )\n  )\n}\n","import {\n  AdminCustomerGroupsDeleteRes,\n  AdminCustomerGroupsRes,\n  AdminDeleteCustomerGroupsGroupCustomerBatchReq,\n  AdminPostCustomerGroupsGroupCustomersBatchReq,\n  AdminPostCustomerGroupsGroupReq,\n  AdminPostCustomerGroupsReq,\n} from \"@medusajs/medusa\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { Response } from \"@medusajs/medusa-js\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminCustomerGroupKeys } from \"./queries\"\n\n/**\n * Hook returns functions for creating customer groups.\n *\n * @param options\n */\nexport const useAdminCreateCustomerGroup = (\n  options?: UseMutationOptions<\n    Response<AdminCustomerGroupsRes>,\n    Error,\n    AdminPostCustomerGroupsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostCustomerGroupsReq) =>\n      client.admin.customerGroups.create(payload),\n    buildOptions(queryClient, adminCustomerGroupKeys.lists(), options)\n  )\n}\n\n/**\n * Hook return functions for updating a customer group.\n *\n * @param id - id of the customer group that is being updated\n * @param options\n */\nexport const useAdminUpdateCustomerGroup = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCustomerGroupsRes>,\n    Error,\n    AdminPostCustomerGroupsGroupReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostCustomerGroupsGroupReq) =>\n      client.admin.customerGroups.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminCustomerGroupKeys.lists(), adminCustomerGroupKeys.detail(id)],\n      options\n    )\n  )\n}\n\n/**\n * Hook return functions for deleting a customer group.\n *\n * @param id - id of the customer group that is being deleted\n * @param options\n */\nexport const useAdminDeleteCustomerGroup = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCustomerGroupsDeleteRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.customerGroups.delete(id),\n    buildOptions(\n      queryClient,\n      [adminCustomerGroupKeys.lists(), adminCustomerGroupKeys.detail(id)],\n      options\n    )\n  )\n}\n\n/**\n * Hook returns functions for addition of multiple customers to a customer group.\n *\n * @param id - id of the customer group in which customers are being added\n * @param options\n */\nexport const useAdminAddCustomersToCustomerGroup = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCustomerGroupsRes>,\n    Error,\n    AdminPostCustomerGroupsGroupCustomersBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostCustomerGroupsGroupCustomersBatchReq) =>\n      client.admin.customerGroups.addCustomers(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminCustomerGroupKeys.lists(),\n        adminCustomerGroupKeys.detailCustomer(id),\n      ],\n      options\n    )\n  )\n}\n\n/**\n * Hook returns function for removal of multiple customers from a customer group.\n *\n * @param id - id of a group from which customers will be removed\n * @param options\n */\nexport const useAdminRemoveCustomersFromCustomerGroup = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCustomerGroupsRes>,\n    Error,\n    AdminDeleteCustomerGroupsGroupCustomerBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeleteCustomerGroupsGroupCustomerBatchReq) =>\n      client.admin.customerGroups.removeCustomers(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminCustomerGroupKeys.lists(),\n        adminCustomerGroupKeys.detailCustomer(id),\n      ],\n      options\n    )\n  )\n}\n","import { adminOrderKeys } from \"./queries\"\nimport {\n  AdminOrdersRes,\n  AdminPostOrdersOrderFulfillmentsReq,\n  AdminPostOrdersOrderRefundsReq,\n  AdminPostOrdersOrderReq,\n  AdminPostOrdersOrderReturnsReq,\n  AdminPostOrdersOrderShipmentReq,\n  AdminPostOrdersOrderShippingMethodsReq,\n  AdminPostOrdersReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminCreateOrder = (\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostOrdersReq) => client.admin.orders.create(payload),\n    buildOptions(queryClient, adminOrderKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateOrder = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderReq) =>\n      client.admin.orders.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCancelOrder = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orders.cancel(id),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCompleteOrder = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orders.complete(id),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCapturePayment = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orders.capturePayment(id),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminRefundPayment = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderRefundsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderRefundsReq) =>\n      client.admin.orders.refundPayment(id, payload),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateFulfillment = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderFulfillmentsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderFulfillmentsReq) =>\n      client.admin.orders.createFulfillment(orderId, payload),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(orderId)],\n      options\n    )\n  )\n}\n\nexport const useAdminCancelFulfillment = (\n  orderId: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (fulfillmentId: string) =>\n      client.admin.orders.cancelFulfillment(orderId, fulfillmentId),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(orderId)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateShipment = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderShipmentReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderShipmentReq) =>\n      client.admin.orders.createShipment(orderId, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminRequestReturn = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderReturnsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderReturnsReq) =>\n      client.admin.orders.requestReturn(orderId, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminAddShippingMethod = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderShippingMethodsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderShippingMethodsReq) =>\n      client.admin.orders.addShippingMethod(orderId, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminArchiveOrder = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orders.archive(id),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteOrderMetadata = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (key: string) => client.admin.orders.deleteMetadata(id, key),\n    buildOptions(queryClient, adminOrderKeys.detail(id), options)\n  )\n}\n","import { adminStoreKeys } from \"./queries\"\nimport { AdminPostStoreReq, AdminStoresRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminUpdateStore = (\n  options?: UseMutationOptions<\n    Response<AdminStoresRes>,\n    Error,\n    AdminPostStoreReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostStoreReq) => client.admin.store.update(payload),\n    buildOptions(queryClient, adminStoreKeys.details(), options)\n  )\n}\n\nexport const useAdminAddStoreCurrency = (\n  options?: UseMutationOptions<Response<AdminStoresRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (currency_code: string) => client.admin.store.deleteCurrency(currency_code),\n    buildOptions(queryClient, adminStoreKeys.details(), options)\n  )\n}\n\nexport const useAdminDeleteStoreCurrency = (\n  options?: UseMutationOptions<Response<AdminStoresRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (currency_code: string) => client.admin.store.deleteCurrency(currency_code),\n    buildOptions(queryClient, adminStoreKeys.details(), options)\n  )\n}\n","import { AdminBatchJobRes, AdminPostBatchesReq } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminBatchJobsKeys } from \"./queries\"\n\n/**\n * Hook returns functions for creating batch jobs.\n *\n * @param options\n */\nexport const useAdminCreateBatchJob = (\n  options?: UseMutationOptions<\n    Response<AdminBatchJobRes>,\n    Error,\n    AdminPostBatchesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostBatchesReq) => client.admin.batchJobs.create(payload),\n    buildOptions(queryClient, adminBatchJobsKeys.lists(), options)\n  )\n}\n\n/**\n * Hook return functions for canceling a batch job\n *\n * @param id - id of the batch job\n * @param options\n */\nexport const useAdminCancelBatchJob = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminBatchJobRes>, Error>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.batchJobs.cancel(id),\n    buildOptions(\n      queryClient,\n      [adminBatchJobsKeys.lists(), adminBatchJobsKeys.detail(id)],\n      options\n    )\n  )\n}\n\n/**\n * Hook return functions for confirming a batch job\n *\n * @param id - id of the batch job\n * @param options\n */\nexport const useAdminConfirmBatchJob = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminBatchJobRes>, Error>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.batchJobs.confirm(id),\n    buildOptions(\n      queryClient,\n      [adminBatchJobsKeys.lists(), adminBatchJobsKeys.detail(id)],\n      options\n    )\n  )\n}\n","import { adminOrderKeys } from \"./../orders/queries\"\nimport {\n  AdminOrdersRes,\n  AdminPostOrdersOrderClaimsClaimFulfillmentsReq,\n  AdminPostOrdersOrderClaimsClaimReq,\n  AdminPostOrdersOrderClaimsClaimShipmentsReq,\n  AdminPostOrdersOrderClaimsReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminCreateClaim = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderClaimsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderClaimsReq) =>\n      client.admin.orders.createClaim(orderId, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminUpdateClaim = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderClaimsClaimReq & { claim_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      claim_id,\n      ...payload\n    }: AdminPostOrdersOrderClaimsClaimReq & { claim_id: string }) =>\n      client.admin.orders.updateClaim(orderId, claim_id, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminCancelClaim = (\n  orderId: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (claimId: string) => client.admin.orders.cancelClaim(orderId, claimId),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminFulfillClaim = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderClaimsClaimFulfillmentsReq & { claim_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      claim_id,\n      ...payload\n    }: AdminPostOrdersOrderClaimsClaimFulfillmentsReq & { claim_id: string }) =>\n      client.admin.orders.fulfillClaim(orderId, claim_id, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminCancelClaimFulfillment = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    { claim_id: string; fulfillment_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      claim_id,\n      fulfillment_id,\n    }: {\n      claim_id: string\n      fulfillment_id: string\n    }) =>\n      client.admin.orders.cancelClaimFulfillment(\n        orderId,\n        claim_id,\n        fulfillment_id\n      ),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminCreateClaimShipment = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderClaimsClaimShipmentsReq & { claim_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      claim_id,\n      ...payload\n    }: AdminPostOrdersOrderClaimsClaimShipmentsReq & { claim_id: string }) =>\n      client.admin.orders.createClaimShipment(orderId, claim_id, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n","import {\n  AdminPostReturnsReturnReceiveReq,\n  AdminReturnsCancelRes,\n  AdminReturnsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminReturnKeys } from \"./queries\"\n\nexport const useAdminReceiveReturn = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminReturnsRes>,\n    Error,\n    AdminPostReturnsReturnReceiveReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    payload => client.admin.returns.receive(id, payload),\n    buildOptions(\n      queryClient,\n      [adminReturnKeys.detail(id), adminReturnKeys.list()],\n      options\n    )\n  )\n}\n\nexport const useAdminCancelReturn = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminReturnsCancelRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.returns.cancel(id),\n    buildOptions(\n      queryClient,\n      [adminReturnKeys.detail(id), adminReturnKeys.list()],\n      options\n    )\n  )\n}\n","import {\n  AdminOrdersRes,\n  AdminPostOrdersOrderSwapsReq,\n  AdminPostOrdersOrderSwapsSwapFulfillmentsReq,\n  AdminPostOrdersOrderSwapsSwapShipmentsReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { adminOrderKeys } from \"..\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminSwapKeys } from \"./queries\"\n\nexport const useAdminCreateSwap = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderSwapsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostOrdersOrderSwapsReq) =>\n      client.admin.orders.createSwap(orderId, payload),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.detail(orderId), adminSwapKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminCancelSwap = (\n  orderId: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (swapId: string) => client.admin.orders.cancelSwap(orderId, swapId),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.detail(orderId), adminSwapKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminFulfillSwap = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderSwapsSwapFulfillmentsReq & { swap_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      swap_id,\n      ...payload\n    }: AdminPostOrdersOrderSwapsSwapFulfillmentsReq & { swap_id: string }) =>\n      client.admin.orders.fulfillSwap(orderId, swap_id, payload),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.detail(orderId), adminSwapKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateSwapShipment = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderSwapsSwapShipmentsReq & { swap_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      swap_id,\n      ...payload\n    }: AdminPostOrdersOrderSwapsSwapShipmentsReq & { swap_id: string }) =>\n      client.admin.orders.createSwapShipment(orderId, swap_id, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminProcessSwapPayment = (\n  orderId: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (swapId: string) => client.admin.orders.processSwapPayment(orderId, swapId),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.detail(orderId), adminSwapKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminCancelSwapFulfillment = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    { swap_id: string; fulfillment_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      swap_id,\n      fulfillment_id,\n    }: {\n      swap_id: string\n      fulfillment_id: string\n    }) =>\n      client.admin.orders.cancelSwapFulfillment(\n        orderId,\n        swap_id,\n        fulfillment_id\n      ),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.detail(orderId), adminSwapKeys.lists()],\n      options\n    )\n  )\n}\n","import {\n  AdminCollectionsDeleteRes,\n  AdminCollectionsRes,\n  AdminPostCollectionsCollectionReq,\n  AdminPostCollectionsReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { adminCollectionKeys } from \".\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminCreateCollection = (\n  options?: UseMutationOptions<\n    Response<AdminCollectionsRes>,\n    Error,\n    AdminPostCollectionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostCollectionsReq) =>\n      client.admin.collections.create(payload),\n    buildOptions(queryClient, adminCollectionKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateCollection = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCollectionsRes>,\n    Error,\n    AdminPostCollectionsCollectionReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostCollectionsCollectionReq) =>\n      client.admin.collections.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminCollectionKeys.lists(), adminCollectionKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteCollection = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminCollectionsDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    () => client.admin.collections.delete(id),\n    buildOptions(\n      queryClient,\n      [adminCollectionKeys.lists(), adminCollectionKeys.detail(id)],\n      options\n    )\n  )\n}\n","import { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\n\nimport { AdminCustomersRes, AdminPostCustomersReq } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminCustomerKeys } from \"./queries\"\n\nexport const useAdminCreateCustomer = (\n  options?: UseMutationOptions<\n    Response<AdminCustomersRes>,\n    Error,\n    AdminPostCustomersReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostCustomersReq) => client.admin.customers.create(payload),\n    buildOptions(queryClient, adminCustomerKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateCustomer = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCustomersRes>,\n    Error,\n    AdminPostCustomersReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostCustomersReq) =>\n      client.admin.customers.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminCustomerKeys.lists(), adminCustomerKeys.detail(id)],\n      options\n    )\n  )\n}\n","import {\n  AdminDiscountsDeleteRes,\n  AdminDiscountsRes,\n  AdminPostDiscountsDiscountConditions,\n  AdminPostDiscountsDiscountConditionsCondition,\n  AdminPostDiscountsDiscountDynamicCodesReq,\n  AdminPostDiscountsDiscountReq,\n  AdminPostDiscountsReq\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminDiscountKeys } from \"./queries\"\n\nexport const useAdminCreateDiscount = (\n  options?: UseMutationOptions<\n    Response<AdminDiscountsRes>,\n    Error,\n    AdminPostDiscountsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDiscountsReq) => client.admin.discounts.create(payload),\n    buildOptions(queryClient, adminDiscountKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateDiscount = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminDiscountsRes>,\n    Error,\n    AdminPostDiscountsDiscountReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDiscountsDiscountReq) =>\n      client.admin.discounts.update(id, payload),\n    buildOptions(queryClient, adminDiscountKeys.detail(id), options)\n  )\n}\n\nexport const useAdminDeleteDiscount = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDiscountsDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    () => client.admin.discounts.delete(id),\n    buildOptions(queryClient, adminDiscountKeys.lists(), options)\n  )\n}\n\nexport const useAdminDiscountAddRegion = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDiscountsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (regionId: string) => client.admin.discounts.addRegion(id, regionId),\n    buildOptions(queryClient, adminDiscountKeys.detail(id), options)\n  )\n}\n\nexport const useAdminDiscountRemoveRegion = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDiscountsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (regionId: string) => client.admin.discounts.removeRegion(id, regionId),\n    buildOptions(queryClient, adminDiscountKeys.detail(id), options)\n  )\n}\n\nexport const useAdminCreateDynamicDiscountCode = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminDiscountsRes>,\n    Error,\n    AdminPostDiscountsDiscountDynamicCodesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDiscountsDiscountDynamicCodesReq) =>\n      client.admin.discounts.createDynamicCode(id, payload),\n    buildOptions(\n      queryClient,\n      [adminDiscountKeys.lists(), adminDiscountKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteDynamicDiscountCode = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDiscountsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (code: string) => client.admin.discounts.deleteDynamicCode(id, code),\n    buildOptions(\n      queryClient,\n      [adminDiscountKeys.lists(), adminDiscountKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDiscountCreateCondition = (\n  discountId: string,\n  options?: UseMutationOptions<\n    Response<AdminDiscountsRes>,\n    Error,\n    AdminPostDiscountsDiscountConditions\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDiscountsDiscountConditions) =>\n      client.admin.discounts.createCondition(discountId, payload),\n    buildOptions(queryClient, adminDiscountKeys.detail(discountId), options)\n  )\n}\n\nexport const useAdminDiscountUpdateCondition = (\n  discountId: string,\n  conditionId: string,\n  options?: UseMutationOptions<\n    Response<AdminDiscountsRes>,\n    Error,\n    AdminPostDiscountsDiscountConditionsCondition\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDiscountsDiscountConditionsCondition) =>\n      client.admin.discounts.updateCondition(discountId, conditionId, payload),\n    buildOptions(queryClient, adminDiscountKeys.detail(discountId), options)\n  )\n}\n\nexport const useAdminDiscountRemoveCondition = (\n  discountId: string,\n  options?: UseMutationOptions<Response<AdminDiscountsDeleteRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (conditionId: string) =>\n      client.admin.discounts.deleteCondition(discountId, conditionId),\n    buildOptions(queryClient, adminDiscountKeys.detail(discountId), options)\n  )\n}\n","import {\n  AdminDraftOrdersDeleteRes,\n  AdminDraftOrdersRes,\n  AdminPostDraftOrdersDraftOrderLineItemsItemReq,\n  AdminPostDraftOrdersDraftOrderLineItemsReq,\n  AdminPostDraftOrdersDraftOrderRegisterPaymentRes,\n  AdminPostDraftOrdersDraftOrderReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminDraftOrderKeys } from \"./queries\"\n\nexport const useAdminCreateDraftOrder = (\n  options?: UseMutationOptions<\n    Response<AdminDraftOrdersRes>,\n    Error,\n    AdminPostDraftOrdersDraftOrderReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDraftOrdersDraftOrderReq) =>\n      client.admin.draftOrders.create(payload),\n    buildOptions(queryClient, adminDraftOrderKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateDraftOrder = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminDraftOrdersRes>,\n    Error,\n    AdminPostDraftOrdersDraftOrderReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDraftOrdersDraftOrderReq) =>\n      client.admin.draftOrders.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminDraftOrderKeys.detail(id), adminDraftOrderKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteDraftOrder = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDraftOrdersDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    () => client.admin.draftOrders.delete(id),\n    buildOptions(\n      queryClient,\n      [adminDraftOrderKeys.detail(id), adminDraftOrderKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminDraftOrderRegisterPayment = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPostDraftOrdersDraftOrderRegisterPaymentRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    () => client.admin.draftOrders.markPaid(id),\n    buildOptions(queryClient, adminDraftOrderKeys.detail(id), options)\n  )\n}\n\nexport const useAdminDraftOrderAddLineItem = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminDraftOrdersRes>,\n    Error,\n    AdminPostDraftOrdersDraftOrderLineItemsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDraftOrdersDraftOrderLineItemsReq) =>\n      client.admin.draftOrders.addLineItem(id, payload),\n    buildOptions(queryClient, adminDraftOrderKeys.detail(id), options)\n  )\n}\n\nexport const useAdminDraftOrderRemoveLineItem = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDraftOrdersRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (itemId: string) => client.admin.draftOrders.removeLineItem(id, itemId),\n    buildOptions(queryClient, adminDraftOrderKeys.detail(id), options)\n  )\n}\n\nexport const useAdminDraftOrderUpdateLineItem = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminDraftOrdersRes>,\n    Error,\n    AdminPostDraftOrdersDraftOrderLineItemsItemReq & { item_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    ({\n      item_id,\n      ...payload\n    }: AdminPostDraftOrdersDraftOrderLineItemsItemReq & { item_id: string }) =>\n      client.admin.draftOrders.updateLineItem(id, item_id, payload),\n    buildOptions(queryClient, adminDraftOrderKeys.detail(id), options)\n  )\n}\n","import {\n  AdminGiftCardsDeleteRes,\n  AdminGiftCardsRes,\n  AdminPostGiftCardsReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { adminGiftCardKeys } from \".\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminCreateGiftCard = (\n  options?: UseMutationOptions<\n    Response<AdminGiftCardsRes>,\n    Error,\n    AdminPostGiftCardsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostGiftCardsReq) => client.admin.giftCards.create(payload),\n    buildOptions(queryClient, adminGiftCardKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateGiftCard = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminGiftCardsRes>,\n    Error,\n    AdminPostGiftCardsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostGiftCardsReq) =>\n      client.admin.giftCards.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminGiftCardKeys.lists(), adminGiftCardKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteGiftCard = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminGiftCardsDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    () => client.admin.giftCards.delete(id),\n    buildOptions(\n      queryClient,\n      [adminGiftCardKeys.lists(), adminGiftCardKeys.detail(id)],\n      options\n    )\n  )\n}\n","import {\n  AdminNotesDeleteRes,\n  AdminNotesRes,\n  AdminPostNotesNoteReq,\n  AdminPostNotesReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { adminNoteKeys } from \".\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminCreateNote = (\n  options?: UseMutationOptions<\n    Response<AdminNotesRes>,\n    Error,\n    AdminPostNotesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostNotesReq) => client.admin.notes.create(payload),\n    buildOptions(queryClient, adminNoteKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateNote = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminNotesRes>,\n    Error,\n    AdminPostNotesNoteReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostNotesNoteReq) => client.admin.notes.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminNoteKeys.detail(id), adminNoteKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteNote = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminNotesDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.notes.delete(id),\n    buildOptions(\n      queryClient,\n      [adminNoteKeys.detail(id), adminNoteKeys.lists()],\n      options\n    )\n  )\n}\n","import {\n  AdminDeleteUploadsReq,\n  IAdminPostUploadsFileReq,\n  AdminDeleteUploadsRes,\n  AdminPostUploadsDownloadUrlReq,\n  AdminUploadsDownloadUrlRes,\n  AdminUploadsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminUploadFile = (\n  options?: UseMutationOptions<\n    Response<AdminUploadsRes>,\n    Error,\n    IAdminPostUploadsFileReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation((payload: IAdminPostUploadsFileReq) => {\n    return client.admin.uploads.create(payload)\n  }, buildOptions(queryClient, undefined, options))\n}\n\nexport const useAdminCreatePresignedDownloadUrl = (\n  options?: UseMutationOptions<\n    Response<AdminUploadsDownloadUrlRes>,\n    Error,\n    AdminPostUploadsDownloadUrlReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostUploadsDownloadUrlReq) =>\n      client.admin.uploads.getPresignedDownloadUrl(payload),\n    buildOptions(queryClient, undefined, options)\n  )\n}\n\nexport const useAdminDeleteFile = (\n  options?: UseMutationOptions<\n    Response<AdminDeleteUploadsRes>,\n    Error,\n    AdminDeleteUploadsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeleteUploadsReq) => client.admin.uploads.delete(payload),\n    buildOptions(queryClient, undefined, options)\n  )\n}\n","import {\n  AdminPriceListRes,\n  AdminPostPriceListsPriceListPriceListReq,\n  AdminPostPriceListsPriceListReq,\n  AdminPostPriceListPricesPricesReq,\n  AdminDeletePriceListPricesPricesReq,\n  AdminPriceListDeleteRes,\n  AdminPriceListDeleteBatchRes,\n  AdminPriceListDeleteProductPricesRes,\n  AdminPriceListDeleteVariantPricesRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminPriceListKeys } from \"./queries\"\nimport { adminProductKeys } from \"../products\"\nimport { adminVariantKeys } from \"../variants\"\n\nexport const useAdminCreatePriceList = (\n  options?: UseMutationOptions<\n    Response<AdminPriceListRes>,\n    Error,\n    AdminPostPriceListsPriceListReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostPriceListsPriceListReq) =>\n      client.admin.priceLists.create(payload),\n    buildOptions(queryClient, adminPriceListKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdatePriceList = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPriceListRes>,\n    Error,\n    AdminPostPriceListsPriceListPriceListReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostPriceListsPriceListPriceListReq) =>\n      client.admin.priceLists.update(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminPriceListKeys.detail(id),\n        adminPriceListKeys.lists(),\n        adminPriceListKeys.detailProducts(id),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminDeletePriceList = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminPriceListDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.priceLists.delete(id),\n    buildOptions(\n      queryClient,\n      [adminPriceListKeys.detail(id), adminPriceListKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminCreatePriceListPrices = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPriceListRes>,\n    Error,\n    AdminPostPriceListPricesPricesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostPriceListPricesPricesReq) =>\n      client.admin.priceLists.addPrices(id, payload),\n    buildOptions(\n      queryClient,\n      [adminPriceListKeys.lists(), adminPriceListKeys.detailProducts(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeletePriceListPrices = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPriceListDeleteBatchRes>,\n    Error,\n    AdminDeletePriceListPricesPricesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeletePriceListPricesPricesReq) =>\n      client.admin.priceLists.deletePrices(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminPriceListKeys.detail(id),\n        adminPriceListKeys.lists(),\n        adminPriceListKeys.detailProducts(id),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminDeletePriceListProductPrices = (\n  id: string,\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminPriceListDeleteProductPricesRes>,\n    Error\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.priceLists.deleteProductPrices(id, productId),\n    buildOptions(\n      queryClient,\n      [\n        adminPriceListKeys.detail(id),\n        adminPriceListKeys.lists(),\n        adminProductKeys.detail(productId)\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminDeletePriceListVariantPrices = (\n  id: string,\n  variantId: string,\n  options?: UseMutationOptions<\n    Response<AdminPriceListDeleteVariantPricesRes>,\n    Error\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.priceLists.deleteVariantPrices(id, variantId),\n    buildOptions(\n      queryClient,\n      [\n        adminPriceListKeys.detail(id),\n        adminPriceListKeys.lists(),\n        adminVariantKeys.detail(variantId)\n      ],\n      options\n    )\n  )\n}\n","import { adminProductKeys } from \"./queries\"\nimport {\n  AdminProductsDeleteRes,\n  AdminProductsRes,\n  AdminPostProductsProductReq,\n  AdminPostProductsReq,\n  AdminPostProductsProductVariantsReq,\n  AdminProductsDeleteVariantRes,\n  AdminPostProductsProductOptionsReq,\n  AdminPostProductsProductOptionsOption,\n  AdminProductsDeleteOptionRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminCreateProduct = (\n  options?: UseMutationOptions<\n    Response<AdminProductsRes>,\n    Error,\n    AdminPostProductsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostProductsReq) => client.admin.products.create(payload),\n    buildOptions(queryClient, adminProductKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateProduct = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsRes>,\n    Error,\n    AdminPostProductsProductReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostProductsProductReq) =>\n      client.admin.products.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminProductKeys.lists(), adminProductKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteProduct = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminProductsDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.products.delete(id),\n    buildOptions(\n      queryClient,\n      [adminProductKeys.lists(), adminProductKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateVariant = (\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsRes>,\n    Error,\n    AdminPostProductsProductVariantsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostProductsProductVariantsReq) =>\n      client.admin.products.createVariant(productId, payload),\n    buildOptions(\n      queryClient,\n      [adminProductKeys.lists(), adminProductKeys.detail(productId)],\n      options\n    )\n  )\n}\n\nexport const useAdminUpdateVariant = (\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsRes>,\n    Error,\n    AdminPostProductsProductVariantsReq & { variant_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      variant_id,\n      ...payload\n    }: AdminPostProductsProductVariantsReq & { variant_id: string }) =>\n      client.admin.products.updateVariant(productId, variant_id, payload),\n    buildOptions(\n      queryClient,\n      [adminProductKeys.lists(), adminProductKeys.detail(productId)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteVariant = (\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsDeleteVariantRes>,\n    Error,\n    string\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (variantId: string) =>\n      client.admin.products.deleteVariant(productId, variantId),\n    buildOptions(\n      queryClient,\n      [adminProductKeys.lists(), adminProductKeys.detail(productId)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateProductOption = (\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsRes>,\n    Error,\n    AdminPostProductsProductOptionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostProductsProductOptionsReq) =>\n      client.admin.products.addOption(productId, payload),\n    buildOptions(queryClient, adminProductKeys.detail(productId), options)\n  )\n}\n\nexport const useAdminUpdateProductOption = (\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsRes>,\n    Error,\n    AdminPostProductsProductOptionsOption & { option_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      option_id,\n      ...payload\n    }: AdminPostProductsProductOptionsOption & { option_id: string }) =>\n      client.admin.products.updateOption(productId, option_id, payload),\n    buildOptions(queryClient, adminProductKeys.detail(productId), options)\n  )\n}\n\nexport const useAdminDeleteProductOption = (\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsDeleteOptionRes>,\n    Error,\n    string\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (optionId: string) =>\n      client.admin.products.deleteOption(productId, optionId),\n    buildOptions(queryClient, adminProductKeys.detail(productId), options)\n  )\n}\n","import { adminTaxRateKeys } from \"./queries\"\nimport {\n  AdminTaxRatesRes,\n  AdminTaxRatesDeleteRes,\n  AdminDeleteTaxRatesTaxRateProductsReq,\n  AdminDeleteTaxRatesTaxRateProductTypesReq,\n  AdminDeleteTaxRatesTaxRateShippingOptionsReq,\n  AdminPostTaxRatesReq,\n  AdminPostTaxRatesTaxRateReq,\n  AdminPostTaxRatesTaxRateProductsReq,\n  AdminPostTaxRatesTaxRateProductTypesReq,\n  AdminPostTaxRatesTaxRateShippingOptionsReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminCreateTaxRate = (\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminPostTaxRatesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostTaxRatesReq) => client.admin.taxRates.create(payload),\n    buildOptions(queryClient, adminTaxRateKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateTaxRate = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminPostTaxRatesTaxRateReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostTaxRatesTaxRateReq) =>\n      client.admin.taxRates.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteTaxRate = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminTaxRatesDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.taxRates.delete(id),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateProductTaxRates = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminPostTaxRatesTaxRateProductsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostTaxRatesTaxRateProductsReq) =>\n      client.admin.taxRates.addProducts(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteProductTaxRates = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminDeleteTaxRatesTaxRateProductsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeleteTaxRatesTaxRateProductsReq) =>\n      client.admin.taxRates.removeProducts(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateProductTypeTaxRates = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminPostTaxRatesTaxRateProductTypesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostTaxRatesTaxRateProductTypesReq) =>\n      client.admin.taxRates.addProductTypes(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteProductTypeTaxRates = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminDeleteTaxRatesTaxRateProductTypesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeleteTaxRatesTaxRateProductTypesReq) =>\n      client.admin.taxRates.removeProductTypes(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateShippingTaxRates = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminPostTaxRatesTaxRateShippingOptionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostTaxRatesTaxRateShippingOptionsReq) =>\n      client.admin.taxRates.addShippingOptions(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteShippingTaxRates = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminDeleteTaxRatesTaxRateShippingOptionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeleteTaxRatesTaxRateShippingOptionsReq) =>\n      client.admin.taxRates.removeShippingOptions(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n","import { adminRegionKeys } from \"./queries\"\nimport {\n  AdminRegionsDeleteRes,\n  AdminRegionsRes,\n  AdminPostRegionsRegionReq,\n  AdminPostRegionsReq,\n  AdminPostRegionsRegionMetadata,\n  AdminPostRegionsRegionCountriesReq,\n  AdminPostRegionsRegionFulfillmentProvidersReq,\n  AdminPostRegionsRegionPaymentProvidersReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminCreateRegion = (\n  options?: UseMutationOptions<\n    Response<AdminRegionsRes>,\n    Error,\n    AdminPostRegionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostRegionsReq) => client.admin.regions.create(payload),\n    buildOptions(queryClient, adminRegionKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateRegion = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminRegionsRes>,\n    Error,\n    AdminPostRegionsRegionReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostRegionsRegionReq) =>\n      client.admin.regions.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminRegionKeys.lists(), adminRegionKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteRegion = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminRegionsDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.regions.delete(id),\n    buildOptions(\n      queryClient,\n      [adminRegionKeys.lists(), adminRegionKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminSetRegionMetadata = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminRegionsRes>,\n    Error,\n    AdminPostRegionsRegionMetadata\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (metadata: AdminPostRegionsRegionMetadata) =>\n      client.admin.regions.setMetadata(id, metadata),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n\nexport const useAdminDeleteRegionMetadata = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminRegionsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (key: string) => client.admin.regions.deleteMetadata(id, key),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n\nexport const useAdminRegionAddCountry = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminRegionsRes>,\n    Error,\n    AdminPostRegionsRegionCountriesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostRegionsRegionCountriesReq) =>\n      client.admin.regions.addCountry(id, payload),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n\nexport const useAdminRegionRemoveCountry = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminRegionsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (country_code: string) =>\n      client.admin.regions.deleteCountry(id, country_code),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n\nexport const useAdminRegionAddFulfillmentProvider = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminRegionsRes>,\n    Error,\n    AdminPostRegionsRegionFulfillmentProvidersReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostRegionsRegionFulfillmentProvidersReq) =>\n      client.admin.regions.addFulfillmentProvider(id, payload),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n\nexport const useAdminRegionDeleteFulfillmentProvider = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminRegionsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (provider_id: string) =>\n      client.admin.regions.deleteFulfillmentProvider(id, provider_id),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n\nexport const useAdminRegionAddPaymentProvider = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminRegionsRes>,\n    Error,\n    AdminPostRegionsRegionPaymentProvidersReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostRegionsRegionPaymentProvidersReq) =>\n      client.admin.regions.addPaymentProvider(id, payload),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n\nexport const useAdminRegionDeletePaymentProvider = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminRegionsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (provider_id: string) =>\n      client.admin.regions.deletePaymentProvider(id, provider_id),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n","import {\n  AdminPostReturnReasonsReasonReq,\n  AdminPostReturnReasonsReq,\n  AdminReturnReasonsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { adminReturnReasonKeys } from \".\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminCreateReturnReason = (\n  options?: UseMutationOptions<\n    Response<AdminReturnReasonsRes>,\n    Error,\n    AdminPostReturnReasonsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostReturnReasonsReq) =>\n      client.admin.returnReasons.create(payload),\n    buildOptions(queryClient, adminReturnReasonKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateReturnReason = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminReturnReasonsRes>,\n    Error,\n    AdminPostReturnReasonsReasonReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostReturnReasonsReasonReq) =>\n      client.admin.returnReasons.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminReturnReasonKeys.detail(id), adminReturnReasonKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteReturnReason = (\n  id: string,\n  options?: UseMutationOptions\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.returnReasons.delete(id),\n    buildOptions(\n      queryClient,\n      [adminReturnReasonKeys.detail(id), adminReturnReasonKeys.lists()],\n      options\n    )\n  )\n}\n","import { adminShippingOptionKeys } from \"./queries\"\nimport {\n  AdminPostShippingOptionsOptionReq,\n  AdminPostShippingOptionsReq,\n  AdminShippingOptionsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminCreateShippingOption = (\n  options?: UseMutationOptions<\n    Response<AdminShippingOptionsRes>,\n    Error,\n    AdminPostShippingOptionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostShippingOptionsReq) =>\n      client.admin.shippingOptions.create(payload),\n    buildOptions(queryClient, adminShippingOptionKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateShippingOption = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminShippingOptionsRes>,\n    Error,\n    AdminPostShippingOptionsOptionReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostShippingOptionsOptionReq) =>\n      client.admin.shippingOptions.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminShippingOptionKeys.lists(), adminShippingOptionKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteShippingOption = (\n  id: string,\n  options?: UseMutationOptions\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.shippingOptions.delete(id),\n    buildOptions(\n      queryClient,\n      [adminShippingOptionKeys.lists(), adminShippingOptionKeys.detail(id)],\n      options\n    )\n  )\n}\n","import { adminShippingProfileKeys } from \"./queries\"\nimport {\n  AdminDeleteShippingProfileRes,\n  AdminPostShippingProfilesReq,\n  AdminShippingProfilesRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminCreateShippingProfile = (\n  options?: UseMutationOptions<\n    Response<AdminShippingProfilesRes>,\n    Error,\n    AdminPostShippingProfilesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostShippingProfilesReq) =>\n      client.admin.shippingProfiles.create(payload),\n    buildOptions(queryClient, adminShippingProfileKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateShippingProfile = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminShippingProfilesRes>,\n    Error,\n    AdminPostShippingProfilesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostShippingProfilesReq) =>\n      client.admin.shippingProfiles.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminShippingProfileKeys.lists(), adminShippingProfileKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteShippingProfile = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminDeleteShippingProfileRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.shippingProfiles.delete(id),\n    buildOptions(\n      queryClient,\n      [adminShippingProfileKeys.lists(), adminShippingProfileKeys.detail(id)],\n      options\n    )\n  )\n}\n","import {\n  AdminDeleteUserRes,\n  AdminResetPasswordRequest,\n  AdminResetPasswordTokenRequest,\n  AdminUserRes,\n} from \"@medusajs/medusa\"\nimport {\n  AdminCreateUserPayload,\n  AdminUpdateUserPayload,\n  Response,\n} from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { adminCustomerKeys } from \"..\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminCreateUser = (\n  options?: UseMutationOptions<\n    Response<AdminUserRes>,\n    Error,\n    AdminCreateUserPayload\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminCreateUserPayload) => client.admin.users.create(payload),\n    buildOptions(queryClient, adminCustomerKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateUser = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminUserRes>,\n    Error,\n    AdminUpdateUserPayload\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminUpdateUserPayload) => client.admin.users.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminCustomerKeys.lists(), adminCustomerKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteUser = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDeleteUserRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.users.delete(id),\n    buildOptions(\n      queryClient,\n      [adminCustomerKeys.detail(id), adminCustomerKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminResetPassword = (\n  options?: UseMutationOptions<\n    Response<AdminUserRes>,\n    Error,\n    AdminResetPasswordRequest\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (payload: AdminResetPasswordRequest) =>\n      client.admin.users.resetPassword(payload),\n    options\n  )\n}\n\nexport const useAdminSendResetPasswordToken = (\n  options?: UseMutationOptions<\n    Response<void>,\n    Error,\n    AdminResetPasswordTokenRequest\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (payload: AdminResetPasswordTokenRequest) =>\n      client.admin.users.sendResetPasswordToken(payload),\n    options\n  )\n}\n","import { AdminAuthRes, AdminPostAuthReq } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { adminAuthKeys } from \".\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminLogin = (\n  options?: UseMutationOptions<Response<AdminAuthRes>, Error, AdminPostAuthReq>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostAuthReq) => client.admin.auth.createSession(payload),\n    buildOptions(queryClient, adminAuthKeys.details(), options)\n  )\n}\n\nexport const useAdminDeleteSession = (\n  options?: UseMutationOptions<Response<void>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.auth.deleteSession(),\n    buildOptions(queryClient, adminAuthKeys.details(), options)\n  )\n}\n","import {\n  AdminNotificationsRes,\n  AdminPostNotificationsNotificationResendReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { adminNotificationKeys } from \"./queries\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminResendNotification = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminNotificationsRes>,\n    Error,\n    AdminPostNotificationsNotificationResendReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostNotificationsNotificationResendReq) =>\n      client.admin.notifications.resend(id, payload),\n    buildOptions(\n      queryClient,\n      [adminNotificationKeys.lists(), adminNotificationKeys.detail(id)],\n      options\n    )\n  )\n}\n","import {\n  StoreCustomersRes,\n  StorePostCustomersCustomerReq,\n  StorePostCustomersReq,\n} from \"@medusajs/medusa\"\nimport { useMutation, UseMutationOptions } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\n\nexport const useCreateCustomer = (\n  options?: UseMutationOptions<StoreCustomersRes, Error, StorePostCustomersReq>\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostCustomersReq) => client.customers.create(data),\n    options\n  )\n}\n\nexport const useUpdateMe = (\n  options?: UseMutationOptions<\n    StoreCustomersRes,\n    Error,\n    { id: string } & StorePostCustomersCustomerReq\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    ({ id, ...data }: { id: string } & StorePostCustomersCustomerReq) =>\n      client.customers.update(data),\n    options\n  )\n}\n","import {\n  StoreCartsRes,\n  StorePostCartsCartLineItemsReq,\n  StorePostCartsCartLineItemsItemReq,\n} from \"@medusajs/medusa\"\nimport { useMutation, UseMutationOptions } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\n\nexport const useCreateLineItem = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    StorePostCartsCartLineItemsReq\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostCartsCartLineItemsReq) =>\n      client.carts.lineItems.create(cartId, data),\n    options\n  )\n}\n\nexport const useUpdateLineItem = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    StorePostCartsCartLineItemsItemReq & { lineId: string }\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    ({\n      lineId,\n      ...data\n    }: StorePostCartsCartLineItemsItemReq & { lineId: string }) =>\n      client.carts.lineItems.update(cartId, lineId, data),\n    options\n  )\n}\n\nexport const useDeleteLineItem = (\n  cartId: string,\n  options?: UseMutationOptions<StoreCartsRes, Error, { lineId: string }>\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    ({ lineId }: { lineId: string }) =>\n      client.carts.lineItems.delete(cartId, lineId),\n    options\n  )\n}\n","import { StoreReturnsRes, StorePostReturnsReq } from \"@medusajs/medusa\"\nimport { useMutation, UseMutationOptions } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\n\nexport const useCreateReturn = (\n  options?: UseMutationOptions<StoreReturnsRes, Error, StorePostReturnsReq>\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostReturnsReq) => client.returns.create(data),\n    options\n  )\n}\n","import { StoreSwapsRes, StorePostSwapsReq } from \"@medusajs/medusa\"\nimport { useMutation, UseMutationOptions } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\n\nexport const useCreateSwap = (\n  options?: UseMutationOptions<StoreSwapsRes, Error, StorePostSwapsReq>\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostSwapsReq) => client.swaps.create(data),\n    options\n  )\n}\n"],"names":["ACTION_TYPES","MedusaContext","React","createContext","useMedusa","context","useContext","Error","queryKeysFactory","globalKey","queryKeyFactory","all","lists","list","query","details","detail","id","computeVariantPrice","region","includeTaxes","amount","getVariantPrice","variant","computeAmount","price","prices","_variant$prices","find","p","currency_code","toLowerCase","_region$currency_code","convertToDecimal","getTaxRate","noDivisionCurrencies","divisor","includes","_region$currency_code2","Math","floor","isEmpty","tax_rate","convertToLocale","minimumFractionDigits","maximumFractionDigits","locale","Intl","NumberFormat","style","currency","format","toString","SessionCartContext","reducer","state","action","type","INIT","SET_REGION","generateCartState","payload","items","ADD_ITEM","duplicateVariantIndex","findIndex","item","_action$payload","_action$payload$varia","splice","UPDATE_ITEM","map","REMOVE_ITEM","filter","SET_ITEMS","CLEAR_ITEMS","total","totalItems","newItems","generateItems","reduce","sum","quantity","calculateSessionCartTotal","defaultInitialState","productKeys","cartKeys","runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","Context","_invoke","method","arg","undefined","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","error","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","doneResult","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","globalThis","Function","useCreateCart","options","client","useMutation","data","carts","useUpdateCart","cartId","update","useCompleteCart","useCreatePaymentSession","createPaymentSessions","useSetPaymentSession","setPaymentSession","useAddShippingMethodToCart","addShippingMethod","shippingOptionKey","cart","regionsKey","returnReasonsKey","swapKey","orderKeys","customerKeys","orders","giftCardKeys","collectionKeys","CartContext","adminAuthKeys","buildOptions","queryClient","queryKey","onSuccess","Array","isArray","invalidateQueries","adminBatchJobsKeys","adminOrderKeys","adminCollectionKeys","adminCustomerGroupKeys","detailCustomer","adminCustomerKeys","adminDiscountKeys","detailCondition","adminDraftOrderKeys","adminGiftCardKeys","adminInviteKeys","adminNoteKeys","adminNotificationKeys","adminPriceListKeys","detailProducts","adminProductKeys","adminVariantKeys","adminProductTagKeys","adminProductTypeKeys","adminRegionKeys","adminReturnReasonKeys","adminReturnKeys","adminShippingOptionKeys","adminShippingProfileKeys","adminStoreKeys","adminSwapKeys","adminTaxRateKeys","adminUserKeys","children","initialState","useState","setCart","createCart","updateCart","startCheckout","pay","completeCheckout","acc","curr","Provider","queryClientProviderProps","medusaClient","Medusa","baseUrl","maxRetries","apiKey","QueryClientProvider","setItem","JSON","stringify","window","localStorage","getItem","removeItem","save","useReducer","parse","dispatch","useEffect","setRegion","isObject","addItem","updateItem","updateItemQuantity","min","inventory_quantity","incrementItemQuantity","decrementItemQuantity","max","setItems","clearItems","rest","taxAwareAmount","useQueryClient","admin","invites","accept","customerGroups","addCustomers","orderId","store","deleteCurrency","archive","useQuery","batchJobs","retrieve","cancel","claimId","cancelClaim","cancelClaimFulfillment","claim_id","fulfillment_id","fulfillmentId","cancelFulfillment","returns","swapId","cancelSwap","cancelSwapFulfillment","swap_id","capturePayment","collections","confirm","createClaim","createClaimShipment","customers","discounts","draftOrders","createDynamicCode","createFulfillment","giftCards","notes","uploads","getPresignedDownloadUrl","priceLists","addPrices","products","productId","addOption","taxRates","addProducts","addProductTypes","regions","returnReasons","createShipment","shippingOptions","shippingProfiles","addShippingOptions","createSwap","createSwapShipment","users","createVariant","listCustomers","code","deleteDynamicCode","deleteMetadata","deletePrices","deleteProductPrices","variantId","deleteVariantPrices","optionId","deleteOption","removeProducts","removeProductTypes","auth","deleteSession","removeShippingOptions","deleteVariant","regionId","addRegion","discountId","createCondition","conditionId","deleteCondition","removeRegion","updateCondition","addLineItem","markPaid","itemId","removeLineItem","item_id","updateLineItem","fulfillClaim","fulfillSwap","retrieveByCode","getCondition","getSession","createSession","notifications","listProducts","processSwapPayment","listTags","productTags","productTypes","receive","refundPayment","addCountry","addFulfillmentProvider","addPaymentProvider","provider_id","deleteFulfillmentProvider","deletePaymentProvider","retrieveFulfillmentOptions","country_code","deleteCountry","removeCustomers","requestReturn","resend","resetPassword","sendResetPasswordToken","metadata","setMetadata","listPaymentProviders","listTaxProviders","swaps","updateClaim","option_id","updateOption","variant_id","updateVariant","variants","retrieveByCartId","listCartOptions","lineItems","limit","offset","listOrders","lineId","deletePaymentSession","lookupOrder","refreshPaymentSession","updatePaymentSession"],"mappings":"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"}